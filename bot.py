import logging
import os
import asyncio
import re
import sqlite3
from datetime import datetime, timedelta
from dotenv import load_dotenv
import httpx
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from openai import OpenAI

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
THE_SPORTS_DB_API_KEY = os.getenv("THE_SPORTS_DB_API_KEY")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞
client = OpenAI(api_key=OPENAI_API_KEY)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°–æ–∑–¥–∞–Ω–∏–µ –ë–î
def init_db():
    conn = sqlite3.connect("chat_history.db")
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS messages (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            role TEXT,
            content TEXT,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    conn.commit()
    conn.close()

init_db()

def save_message(user_id: int, role: str, content: str):
    conn = sqlite3.connect("chat_history.db")
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO messages (user_id, role, content) VALUES (?, ?, ?)",
        (user_id, role, content)
    )
    conn.commit()
    conn.close()

def get_user_history(user_id, limit=20):
    conn = sqlite3.connect("chat_history.db")
    cursor = conn.cursor()
    cursor.execute('''
        SELECT role, content FROM messages
        WHERE user_id = ?
        ORDER BY timestamp DESC
        LIMIT ?
    ''', (user_id, limit))
    rows = cursor.fetchall()
    conn.close()
    return [{"role": role, "content": content} for role, content in reversed(rows)]

SPORTS_ANALYST_PROMPT = """
–¢—ã ‚Äî —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –ò–ò-–∞–Ω–∞–ª–∏—Ç–∏–∫, –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –≤ Telegram-–±–æ—Ç–∞.

–í—Å–µ–≥–¥–∞ –ø–∏—à–∏ –æ—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –ø–æ —ç—Ç–æ–º—É —à–∞–±–ª–æ–Ω—É –∏ –Ω–µ –æ—Ç–∫–ª–æ–Ω—è–π—Å—è –æ—Ç –Ω–µ–≥–æ.  
–ù–µ –¥–æ–±–∞–≤–ª—è–π —Ç–µ–∫—Å—Ç –≤–Ω–µ —ç—Ç–∏—Ö –±–ª–æ–∫–æ–≤ –∏ –Ω–µ –º–µ–Ω—è–π –∏—Ö –ø–æ—Ä—è–¥–æ–∫.  

–§–æ—Ä–º–∞—Ç:
üìÖ –î–∞—Ç–∞: [–¥–∞—Ç–∞ –º–∞—Ç—á–∞]  
‚öîÔ∏è –ú–∞—Ç—á: [–∫–æ–º–∞–Ω–¥–∞ 1] ‚Äî [–∫–æ–º–∞–Ω–¥–∞ 2]  
üìä –ü—Ä–æ–≥–Ω–æ–∑: [–∫—Ä–∞—Ç–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑, –∫—Ç–æ –ø–æ–±–µ–¥–∏—Ç –∏–ª–∏ –≤–µ—Ä–æ—è—Ç–Ω—ã–π –∏—Å—Ö–æ–¥]  

üí∞ –°—Ç–∞–≤–∫–∞ 1: [—Å—Ç–∞–≤–∫–∞] —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º ~[–∫–æ—ç—Ñ]  
üí∞ –°—Ç–∞–≤–∫–∞ 2: [—Å—Ç–∞–≤–∫–∞] —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º ~[–∫–æ—ç—Ñ]  

üî• –ö—Ä–∞—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∞: [1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ —Ñ–æ—Ä–º–µ –∫–æ–º–∞–Ω–¥, –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–∞—Ö, –±–µ–∑ –ª–∏—à–Ω–µ–π –≤–æ–¥—ã]  

üçÄ –ü–æ–∂–µ–ª–∞–Ω–∏–µ: [–∫—Ä–∞—Ç–∫–æ–µ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ –≤ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–º —Å—Ç–∏–ª–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä "–£–¥–∞—á–∏! –°—Ç–∞–≤—å —Å —É–º–æ–º! ‚öΩÔ∏èüî•"]

–ü—Ä–∞–≤–∏–ª–∞:
- –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω—è–π –≤—Å–µ –ø–æ–ª—è.
- –î–∞—Ç—ã –∏ –∫–æ–º–∞–Ω–¥—ã –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
- –ü–∏—à–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-—Å—Ç–∏–ª–µ —Å —ç–º–æ–¥–∑–∏.
- –ù–∏–∫–∞–∫–∏—Ö –¥–ª–∏–Ω–Ω—ã—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π, —Ç–æ–ª—å–∫–æ –∫—Ä–∞—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.
- –ü–æ–∂–µ–ª–∞–Ω–∏–µ –≤—Å–µ–≥–¥–∞ –≤ –∫–æ–Ω—Ü–µ.
"""

DETAILED_ANALYST_PROMPT = """
–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫.

–î–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π, –Ω–æ —ë–º–∫–∏–π —Ä–∞–∑–±–æ—Ä –ø—Ä–æ–≥–Ω–æ–∑–∞ —Å –∫–ª—é—á–µ–≤—ã–º–∏ –º–æ–º–µ–Ω—Ç–∞–º–∏:
1. –¢–µ–∫—É—â–∞—è —Ñ–æ—Ä–º–∞ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–∞–Ω–¥/—Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤.
2. –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã.
3. –í–∞–∂–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏ –ª–∏—á–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏.
4. –§–∞–∫—Ç–æ—Ä—ã, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ –º–∞—Ç—á (–ø–æ–≥–æ–¥–∞, –º–µ—Å—Ç–æ, –º–æ—Ç–∏–≤–∞—Ü–∏—è).
5. –ò—Ç–æ–≥–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑ —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º.
6. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å—Ç–∞–≤–∫–∞–º —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏.

–ü–∏—à–∏ –∫—Ä–∞—Ç–∫–æ, –ø–æ–Ω—è—Ç–Ω–æ, –±–µ–∑ –ª–∏—à–Ω–∏—Ö –¥–µ—Ç–∞–ª–µ–π, –Ω–æ —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º.
"""

def extract_match_info(user_text: str):
    today = datetime.now()

    if "—Å–µ–≥–æ–¥–Ω—è" in user_text.lower():
        match_date = today.strftime("%d.%m.%Y")
    elif "–∑–∞–≤—Ç—Ä–∞" in user_text.lower():
        match_date = (today + timedelta(days=1)).strftime("%d.%m.%Y")
    elif "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞" in user_text.lower():
        match_date = (today + timedelta(days=2)).strftime("%d.%m.%Y")
    else:
        date_match = re.search(r"\d{1,2}[./-]\d{1,2}([./-]\d{2,4})?", user_text)
        match_date = date_match.group() if date_match else "–¥–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"

    time_match = re.search(r"\b\d{1,2}[:.\-]\d{2}\b", user_text)
    match_time = time_match.group() if time_match else "–≤—Ä–µ–º—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    teams = re.split(r"\s?[-‚Äî]\s?| vs | –ø—Ä–æ—Ç–∏–≤ ", user_text, flags=re.IGNORECASE)
    teams = [t.strip() for t in teams if t.strip()]
    match_teams = " ‚Äî ".join(teams) if len(teams) >= 2 else "–∫–æ–º–∞–Ω–¥—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã"

    return match_teams, match_date, match_time

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–∞—Ç—á–∞ –∫–æ–º–∞–Ω–¥—ã –∏–∑ TheSportsDB
async def get_next_match(team_name: str):
    if not THE_SPORTS_DB_API_KEY:
        return None
    async with httpx.AsyncClient() as client:
        url_team = f"https://www.thesportsdb.com/api/v1/json/{THE_SPORTS_DB_API_KEY}/searchteams.php?t={team_name}"
        res_team = await client.get(url_team)
        if res_team.status_code != 200:
            return None
        data_team = res_team.json()
        if not data_team or not data_team.get("teams"):
            return None
        team_id = data_team["teams"][0]["idTeam"]

        url_events = f"https://www.thesportsdb.com/api/v1/json/{THE_SPORTS_DB_API_KEY}/eventsnext.php?id={team_id}"
        res_events = await client.get(url_events)
        if res_events.status_code != 200:
            return None
        data_events = res_events.json()
        events = data_events.get("events", [])
        if not events:
            return None
        next_event = events[0]
        return {
            "date": next_event.get("dateEvent", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"),
            "time": next_event.get("strTime", "–≤—Ä–µ–º—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
            "home_team": next_event.get("strHomeTeam", ""),
            "away_team": next_event.get("strAwayTeam", ""),
            "league": next_event.get("strLeague", "")
        }

# –û–±—ë—Ä—Ç–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ openai –≤ async
async def get_openai_response(messages):
    try:
        response = await asyncio.to_thread(
            client.chat.completions.create,
            model="gpt-4o-mini",
            messages=messages,
            max_tokens=800,
            temperature=0.7,
            top_p=1,
            frequency_penalty=0,
            presence_penalty=0
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logging.error(f"OpenAI error: {e}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI."

@dp.message(CommandStart())
async def start_cmd(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ üìä\n"
        "–ù–∞–ø–∏—à–∏ –º–∞—Ç—á, –∏ —è –¥–∞–º –∫—Ä–∞—Ç–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –∏ —Å—Ç–∞–≤–∫–∏.\n"
        "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ ‚Äî –Ω–∞–ø–∏—à–∏ '–ø–æ—á–µ–º—É' –∏–ª–∏ '–æ–±—ä—è—Å–Ω–∏'."
    )

@dp.message()
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    user_text = message.text

    await message.answer("–ü–æ–ª—É—á–∏–ª —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å! –†–∞–±–æ—Ç–∞—é –Ω–∞–¥ –ø—Ä–æ–≥–Ω–æ–∑–æ–º...")

    try:
        save_message(user_id, "user", user_text)

        if any(word in user_text.lower() for word in ["–ø–æ—á–µ–º—É", "–æ–±—ä—è—Å–Ω–∏", "–ø–æ—è—Å–Ω–∏"]):
            role_prompt = DETAILED_ANALYST_PROMPT
        else:
            role_prompt = SPORTS_ANALYST_PROMPT

        match_teams, match_date, match_time = extract_match_info(user_text)
        team_name = match_teams.split(" ‚Äî ")[0] if " ‚Äî " in match_teams else None

        external_info = ""
        if team_name:
            next_match = await get_next_match(team_name)
            if next_match:
                external_info = (
                    f"\n\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ TheSportsDB:\n"
                    f"–°–ª–µ–¥—É—é—â–∏–π –º–∞—Ç—á –∫–æ–º–∞–Ω–¥—ã {team_name}:\n"
                    f"{next_match['home_team']} ‚Äî {next_match['away_team']} "
                    f"–≤ –ª–∏–≥–µ {next_match['league']} –Ω–∞ –¥–∞—Ç—É {next_match['date']} "
                    f"–≤—Ä–µ–º—è {next_match['time']}."
                )

        history = get_user_history(user_id)
        history.append({"role": "user", "content": user_text + external_info})

        messages = [{"role": "system", "content": role_prompt}] + history

        response_text = await get_openai_response(messages)

        save_message(user_id, "assistant", response_text)

        await message.answer(response_text)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

if __name__ == "__main__":
    asyncio.run(dp.start_polling(bot))
