import logging
import os
import asyncio
import re
from datetime import datetime, timedelta
import openai
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI
openai.api_key = OPENAI_API_KEY

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# ===== –ü—Ä–æ–º—Ç –¥–ª—è –∫—Ä–∞—Ç–∫–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ =====
SPORTS_ANALYST_PROMPT = """
–¢—ã ‚Äî —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –ò–ò-–∞–Ω–∞–ª–∏—Ç–∏–∫, –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –≤ Telegram-–±–æ—Ç–∞.

–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –¥–∞–≤–∞—Ç—å —á—ë—Ç–∫–∏–π, –∫—Ä–∞—Ç–∫–∏–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–∞—Ç—á:
- –£–∫–∞–∂–∏ –∫–æ–º–∞–Ω–¥—ã, –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏ (–µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω–æ).
- –í—ã–≤–µ–¥–∏ –∏—Ç–æ–≥–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑: –∫—Ç–æ –ø–æ–±–µ–¥–∏—Ç –∏–ª–∏ –∫–∞–∫–æ–π –∏—Å—Ö–æ–¥ –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–µ–Ω.
- –ü—Ä–µ–¥–ª–æ–∂–∏ 1‚Äì2 —Å—Ç–∞–≤–∫–∏ (–ü1, –¢–ë 2.5, –û–ó, –§–æ—Ä–∞ –∏ —Ç.–¥.) –∏ —É–∫–∞–∂–∏ –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã.
- –ü–∏—à–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-—Å—Ç–∏–ª–µ, –¥–æ–±–∞–≤–ª—è–π —ç–º–æ–¥–∑–∏ –ø–æ —Å–º—ã—Å–ª—É (‚öΩÔ∏èüìäüî•üçÄ).
- –ù–µ –¥–∞–≤–∞–π –¥–ª–∏–Ω–Ω—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–± —ç—Ç–æ–º –Ω–µ –ø—Ä–æ—Å–∏–ª.
- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ø—Ä–æ—Å–∏—Ç –ø–æ—è—Å–Ω–µ–Ω–∏–µ ("–ø–æ—á–µ–º—É", "–æ–±—ä—è—Å–Ω–∏", "–ø–æ—è—Å–Ω–∏" –∏ —Ç.–ø.), —Ç–æ–≥–¥–∞ –¥–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ä–∞–∑–±–æ—Ä: —Ñ–æ—Ä–º–∞ –∫–æ–º–∞–Ω–¥, –∫–ª—é—á–µ–≤—ã–µ –∏–≥—Ä–æ–∫–∏, —Ç–∞–∫—Ç–∏–∫–∞, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.

–í—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–π —Å –±–ª–æ–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –∏ —Å—Ç–∞–≤–æ–∫, –∫–∞–∫ –±—É–¥—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–∞–ø–ø–µ—Ä–∞ –≤ Telegram.
–§–æ—Ä–º–∞—Ç:
üìÖ –î–∞—Ç–∞/–≤—Ä–µ–º—è:
‚öîÔ∏è –ú–∞—Ç—á:
üìä –ü—Ä–æ–≥–Ω–æ–∑:
üí∞ –°—Ç–∞–≤–∫–∞(–∏):
"""

# ===== –ü—Ä–æ–º—Ç –¥–ª—è —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ =====
DETAILED_ANALYST_PROMPT = """
–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ —Å –º–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å—Ö–æ–¥–æ–≤ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –∏ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞–≤–æ–∫.

–î–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ä–∞–∑–±–æ—Ä –ø—Ä–æ–≥–Ω–æ–∑–∞, –≤–∫–ª—é—á–∞—è:
1. –ê–Ω–∞–ª–∏–∑ –∫–æ–º–∞–Ω–¥/—Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤ ‚Äî —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Ñ–æ—Ä–º–∞, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–≥—Ä, –∫–ª—é—á–µ–≤—ã–µ –∏–≥—Ä–æ–∫–∏, —Ç—Ä–∞–≤–º—ã, –º–æ—Ç–∏–≤–∞—Ü–∏—è.
2. –¢–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä ‚Äî —Å—Ç–∏–ª—å –∏–≥—Ä—ã, —Å–∏–ª—å–Ω—ã–µ –∏ —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã, –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –º–∞—Ç—á–∞.
3. –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ª–∏—á–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á, —Å—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ (–≥–æ–ª—ã, –æ—á–∫–∏, –ø–æ–±–µ–¥—ã, –ø–æ—Ä–∞–∂–µ–Ω–∏—è).
4. –§–∞–∫—Ç–æ—Ä—ã –≤–ª–∏—è–Ω–∏—è ‚Äî –ø–æ–≥–æ–¥–∞, –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è, —Å—É–¥–µ–π—Å—Ç–≤–æ, —Ç—É—Ä–Ω–∏—Ä–Ω–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è.
5. –ü—Ä–æ–≥–Ω–æ–∑ —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º.
6. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ —Å—Ç–∞–≤–∫–µ ‚Äî 1‚Äì3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º.

–ü–∏—à–∏ –≤ —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–π –º–∞–Ω–µ—Ä–µ, –Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ.
"""

# ===== –§—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ =====
def extract_match_info(user_text: str):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã, –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    today = datetime.now()

    # –î–∞—Ç–∞
    if "—Å–µ–≥–æ–¥–Ω—è" in user_text.lower():
        match_date = today.strftime("%d.%m.%Y")
    elif "–∑–∞–≤—Ç—Ä–∞" in user_text.lower():
        match_date = (today + timedelta(days=1)).strftime("%d.%m.%Y")
    elif "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞" in user_text.lower():
        match_date = (today + timedelta(days=2)).strftime("%d.%m.%Y")
    else:
        date_match = re.search(r"\d{1,2}[./-]\d{1,2}([./-]\d{2,4})?", user_text)
        match_date = date_match.group() if date_match else "–¥–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"

    # –í—Ä–µ–º—è (—Ñ–æ—Ä–º–∞—Ç—ã: 19:00, 19.00, 19-00)
    time_match = re.search(r"\b\d{1,2}[:.\-]\d{2}\b", user_text)
    match_time = time_match.group() if time_match else "–≤—Ä–µ–º—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    # –ö–æ–º–∞–Ω–¥—ã
    teams = re.split(r"\s?[-‚Äî]\s?| vs | –ø—Ä–æ—Ç–∏–≤ ", user_text, flags=re.IGNORECASE)
    teams = [t.strip() for t in teams if t.strip()]
    match_teams = " ‚Äî ".join(teams) if len(teams) >= 2 else "–∫–æ–º–∞–Ω–¥—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã"

    return match_teams, match_date, match_time

# ===== –ö–æ–º–∞–Ω–¥–∞ /start =====
@dp.message(CommandStart())
async def start_cmd(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ üìä\n"
        "–ù–∞–ø–∏—à–∏ –º–∞—Ç—á, –∏ —è –¥–∞–º –∫—Ä–∞—Ç–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –∏ —Å—Ç–∞–≤–∫–∏.\n"
        "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ ‚Äî –Ω–∞–ø–∏—à–∏ '–ø–æ—á–µ–º—É' –∏–ª–∏ '–æ–±—ä—è—Å–Ω–∏'."
    )

# ===== –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π =====
@dp.message()
async def handle_message(message: types.Message):
    try:
        # –í—ã–±–æ—Ä –ø—Ä–æ–º—Ç–∞
        if any(word in message.text.lower() for word in ["–ø–æ—á–µ–º—É", "–æ–±—ä—è—Å–Ω–∏", "–ø–æ—è—Å–Ω–∏"]):
            role_prompt = DETAILED_ANALYST_PROMPT
        else:
            role_prompt = SPORTS_ANALYST_PROMPT

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        match_teams, match_date, match_time = extract_match_info(message.text)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_content = (
            f"–ú–∞—Ç—á: {match_teams}\n"
            f"–î–∞—Ç–∞: {match_date}\n"
            f"–í—Ä–µ–º—è: {match_time}\n"
            f"–ó–∞–ø—Ä–æ—Å: {message.text}"
        )

        # –ó–∞–ø—Ä–æ—Å –∫ OpenAI
        response = openai.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": role_prompt},
                {"role": "user", "content": user_content}
            ]
        )
        reply = response.choices[0].message.content
        await message.answer(reply)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

# ===== –ó–∞–ø—É—Å–∫ =====
async def main():
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
