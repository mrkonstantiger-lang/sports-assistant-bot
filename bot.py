import logging
import os
import asyncio
import re
from datetime import datetime, timedelta
import openai
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI
openai.api_key = OPENAI_API_KEY

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# ===== –ü—Ä–æ–º—Ç—ã =====
SPORTS_ANALYST_PROMPT = """
–¢—ã ‚Äî —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –ò–ò-–∞–Ω–∞–ª–∏—Ç–∏–∫, –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –≤ Telegram-–±–æ—Ç–∞.

–î–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–∞—Ç—á –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–±–ª–æ–Ω—É:

üèÜ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–∞—Ç—á: [–ö–æ–º–∞–Ω–¥–∞ 1] ‚Äî [–ö–æ–º–∞–Ω–¥–∞ 2]  
üìÖ –î–∞—Ç–∞: [–¥–∞—Ç–∞]  
‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: [–≤—Ä–µ–º—è]

üìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–±–µ–¥—ã (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö):  
- [–ö–æ–º–∞–Ω–¥–∞ 1]: XX%  
- [–ö–æ–º–∞–Ω–¥–∞ 2]: XX%  
- –ù–∏—á—å—è: XX%

üî• –ö—Ä–∞—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∞:  
[–ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã –æ —Ñ–æ—Ä–º–µ, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∫–æ–º–∞–Ω–¥]

üí° –í–æ–∑–º–æ–∂–Ω—ã–π –∏—Å—Ö–æ–¥ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å—Ç–∞–≤–∫–∞–º:  
- [–û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞–≤–∫–∞ —Å –ø—Ä–∏–º–µ—Ä–Ω—ã–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º]  
- [–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã—Ö]

üçÄ –£–¥–∞—á–∏! –°—Ç–∞–≤—å —Å —É–º–æ–º –∏ –Ω–µ –≥–æ–Ω–∏—Å—å –∑–∞ –≤—Å–µ–º –ø–æ–¥—Ä—è–¥ üòâ  

–ü–∏—à–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-—Å—Ç–∏–ª–µ —Å —ç–º–æ–¥–∑–∏ –∏ –±–µ–∑ –ª–∏—à–Ω–µ–π –≤–æ–¥—ã.
"""


# ===== –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø–∞–º—è—Ç–∏ =====
user_histories = {}
MAX_HISTORY_MESSAGES = 10

def add_message_to_history(user_id: int, role: str, content: str):
    if user_id not in user_histories:
        user_histories[user_id] = []
    user_histories[user_id].append({"role": role, "content": content})
    if len(user_histories[user_id]) > MAX_HISTORY_MESSAGES:
        user_histories[user_id] = user_histories[user_id][-MAX_HISTORY_MESSAGES:]

def extract_match_info(user_text: str):
    today = datetime.now()
    if "—Å–µ–≥–æ–¥–Ω—è" in user_text.lower():
        match_date = today.strftime("%d.%m.%Y")
    elif "–∑–∞–≤—Ç—Ä–∞" in user_text.lower():
        match_date = (today + timedelta(days=1)).strftime("%d.%m.%Y")
    elif "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞" in user_text.lower():
        match_date = (today + timedelta(days=2)).strftime("%d.%m.%Y")
    else:
        date_match = re.search(r"\d{1,2}[./-]\d{1,2}([./-]\d{2,4})?", user_text)
        match_date = date_match.group() if date_match else "–¥–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"
    time_match = re.search(r"\b\d{1,2}[:.\-]\d{2}\b", user_text)
    match_time = time_match.group() if time_match else "–≤—Ä–µ–º—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    teams = re.split(r"\s?[-‚Äî]\s?| vs | –ø—Ä–æ—Ç–∏–≤ ", user_text, flags=re.IGNORECASE)
    teams = [t.strip() for t in teams if t.strip()]
    match_teams = " ‚Äî ".join(teams) if len(teams) >= 2 else "–∫–æ–º–∞–Ω–¥—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã"
    return match_teams, match_date, match_time

@dp.message(CommandStart())
async def start_cmd(message: types.Message):
    user_id = message.from_user.id
    user_histories.pop(user_id, None)
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ üìä\n"
        "–ù–∞–ø–∏—à–∏ –º–∞—Ç—á, –∏ —è –¥–∞–º –∫—Ä–∞—Ç–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –∏ —Å—Ç–∞–≤–∫–∏.\n"
        "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ ‚Äî –Ω–∞–ø–∏—à–∏ '–ø–æ—á–µ–º—É' –∏–ª–∏ '–æ–±—ä—è—Å–Ω–∏'."
    )

@dp.message()
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    user_text = message.text.strip()
    detailed_requested = any(word in user_text.lower() for word in ["–ø–æ—á–µ–º—É", "–æ–±—ä—è—Å–Ω–∏", "–ø–æ—è—Å–Ω–∏"])
    role_prompt = DETAILED_ANALYST_PROMPT if detailed_requested else SPORTS_ANALYST_PROMPT
    match_teams, match_date, match_time = extract_match_info(user_text)
    user_content = (
        f"–ú–∞—Ç—á: {match_teams}\n"
        f"–î–∞—Ç–∞: {match_date}\n"
        f"–í—Ä–µ–º—è: {match_time}\n"
        f"–ó–∞–ø—Ä–æ—Å: {user_text}"
    )
    add_message_to_history(user_id, "user", user_content)
    messages = [{"role": "system", "content": role_prompt}] + user_histories[user_id]
    try:
        response = openai.chat.completions.create(
            model="gpt-4o",
            messages=messages
        )
        reply = response.choices[0].message.content
        add_message_to_history(user_id, "assistant", reply)
        await message.answer(reply)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

async def main():
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
